// +build unit

package message

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestChecksum(t *testing.T) {
	input := []byte{15, 7}
	expected := byte(233)
	calcChecksum := Checksum(input)
	assert.Equal(t, expected, calcChecksum)
}

func TestChecksumCommand(t *testing.T) {
	input := []byte{0x05}
	expected := byte(0xFA)
	calcChecksum := Checksum(input)
	assert.Equal(t, expected, calcChecksum)
}

func TestChecksumLong(t *testing.T) {
	input := []byte{0x04, 0x57, 0x32, 0x47, 0x47, 0x39, 0x38, 0x35, 0x30}
	expected := byte(0x0E)
	calcChecksum := Checksum(input)
	assert.Equal(t, expected, calcChecksum)
}

func TestChecksumReadCommand(t *testing.T) {
	//input := []byte{0x15, 0x30, 0x30, 0x30, 0x46, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x32, 0x38, 0x30, 0x30, 0x33, 0x32, 0x30, 0x30, 0x33, 0x43, 0x30, 0x30, 0x34, 0x36, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x35, 0x41, 0x30, 0x30, 0x36, 0x34, 0x30, 0x30, 0x36, 0x45, 0x30, 0x30, 0x37, 0x38, 0x30, 0x30, 0x38, 0x32, 0x30, 0x30, 0x30, 0x46, 0x30, 0x30, 0x31, 0x45, 0x30, 0x30, 0x32, 0x38, 0x30, 0x30, 0x33, 0x32, 0x30, 0x30, 0x33, 0x43, 0x30, 0x30, 0x34, 0x36, 0x30, 0x30, 0x35, 0x30, 0x30, 0x30, 0x35, 0x41, 0x30, 0x30, 0x36, 0x34, 0x30, 0x30, 0x36, 0x45, 0x30, 0x30, 0x37, 0x38, 0x30, 0x30, 0x38, 0x32, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x35, 0x41, 0x30, 0x30, 0x37, 0x38, 0x30, 0x30, 0x39, 0x36, 0x30, 0x30, 0x42, 0x33, 0x30, 0x30, 0x44, 0x30, 0x30, 0x30, 0x45, 0x44, 0x30, 0x31, 0x30, 0x41, 0x30, 0x31, 0x32, 0x37, 0x30, 0x31, 0x34, 0x34, 0x30, 0x31, 0x36, 0x31, 0x30, 0x31, 0x37, 0x45, 0x30, 0x30, 0x32, 0x44, 0x30, 0x30, 0x35, 0x41, 0x30, 0x30, 0x37, 0x38, 0x30, 0x30, 0x39, 0x36, 0x30, 0x30, 0x42, 0x33, 0x30, 0x30, 0x44, 0x30, 0x30, 0x30, 0x45, 0x44, 0x30, 0x31, 0x30, 0x41, 0x30, 0x31, 0x32, 0x37, 0x30, 0x31, 0x34, 0x34, 0x30, 0x31, 0x36, 0x31, 0x30, 0x31, 0x37, 0x45}
	input := []byte{0x15, 0x00, 0x0F, 0x00, 0x1E, 0x00, 0x28, 0x00, 0x32, 0x00, 0x3C, 0x00, 0x46, 0x00, 0x50, 0x00, 0x5A, 0x00, 0x64, 0x00, 0x6E, 0x00, 0x78, 0x00, 0x82, 0x00, 0x0F, 0x00, 0x1E, 0x00, 0x28, 0x00, 0x32, 0x00, 0x3C, 0x00, 0x46, 0x00, 0x50, 0x00, 0x5A, 0x00, 0x64, 0x00, 0x6E, 0x00, 0x78, 0x00, 0x82, 0x00, 0x2D, 0x00, 0x5A, 0x00, 0x78, 0x00, 0x96, 0x00, 0xB3, 0x00, 0xD0, 0x00, 0xED, 0x01, 0x0A, 0x01, 0x27, 0x01, 0x44, 0x01, 0x61, 0x01, 0x7E, 0x00, 0x2D, 0x00, 0x5A, 0x00, 0x78, 0x00, 0x96, 0x00, 0xB3, 0x00, 0xD0, 0x00, 0xED, 0x01, 0x0A, 0x01, 0x27, 0x01, 0x44, 0x01, 0x61, 0x01, 0x7E}
	expected := byte(0x30)
	calcChecksum := Checksum(input)
	assert.Equal(t, expected, calcChecksum)
	t.Log(len(input))
}

func TestMakeTorqueData(t *testing.T) {
	testMessage := [24 * 4]byte{}
	want := &TorqueData{header: HeaderByte, dataInfo: BulkParamSendMsg}
	r := MakeTorqueData(testMessage)
	assert.Equal(t, want.header, r.header)
	assert.Equal(t, want.dataInfo, r.dataInfo)
	assert.Equal(t, testMessage, r.message)
}
